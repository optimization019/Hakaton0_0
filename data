package com.example.registracia

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import androidx.lifecycle.ViewModelProvider

class DbHelper(val context: Context, val factory: SQLiteDatabase.CursorFactory?) :
    SQLiteOpenHelper(context, "app", factory, 1){

        override fun onCreate(db: SQLiteDatabase?) {
            val query = "CREATE TABLE users (id INTEGER PRIMARY KEY, login TEXT, email TEXT, pass TEXT)"
            db?.execSQL(query)
            /*db!!.execSQL(query)*/

    }

    override fun onUpgrade(db: SQLiteDatabase?, p1: Int, p2: Int) {
        db?.execSQL("DROP TABLE IF EXISTS users")
        /*db!!.execSQL("DROP TABLE IF EXISTS users")*/
        onCreate(db)

    }
    fun addUser(user: User) {
        val values = ContentValues().apply {
            /*val values = ContentValues()*/
            put("login", user.login)
            put("email", user.email)
            put("pass", user.pass)
        }
            /*values.put("login", user.login)
            values.put("email", user.email)
            values.put("pass", user.pass)*/

        val db = writableDatabase
        /*val db = this.writableDatabase*/
        db.insert("users", null, values)

        db.close()

    }
    fun getUser(login: String, pass: String): Boolean {
        val db = readableDatabase
        /*val db = this.readableDatabase*/
        val query = "SELECT * FROM users WHERE login = ? AND pass = ?"
        val cursor = db.rawQuery(query, arrayOf(login, pass))

        val userExists = cursor.moveToFirst()
        cursor.close()
        /*val result = db.rawQuery("SELECT * FROM users WHERE login = `$login` AND pass = `$pass`", null)
        return result.moveToFirst()*/

        db.close()
        return userExists


    }

}


/* val query = "CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT DEFAULT NULL, login TEXT, email TEXT, pass TEXT)"*/
